///$tab 2_STATHOP
STATHOP:
LOAD
	'STATHOP' as Type,
	CodePeriode as YearMonth,
//     NiveauPeriode,
    CodeProduit as product_code,
//     NiveauProduit,
    CodeGeographie,
//     NiveauGeographie,
//     CodeType,
//     NiveauType,
    replace(UNE,',','.') as UNE,
    replace(CAHT,',','.') as CAHT
FROM $(vGersStathop)
(txt, codepage is 28592, embedded labels, delimiter is ';', msq)
WHERE CodeProduit <> '0'
;

/*
Define minimum month to enable historic load
*/

NoConcatenate
min_max:
LOAD
     min(Num#(YearMonth)) as YearMonth
Resident
STATHOP;

let vMin_GERS = Peek('YearMonth',0,'min_max'); 

drop table min_max;

// Add historic data file - no requirement to refresh data set
Concatenate (STATHOP)
LOAD
	'STATHOP' as Type,
	CodePeriode as YearMonth,
//     NiveauPeriode,
    CodeProduit as product_code,
//     NiveauProduit,
    CodeGeographie,
//     NiveauGeographie,
//     CodeType,
//     NiveauType,
    replace(UNE,',','.') as UNE,
    replace(CAHT,',','.') as CAHT
FROM [lib://AttachedFiles/GAL_BIOTHERAPIESSTATHOP_STATHOP_PDV_4358030001000103_M201912.csv]
(txt, codepage is 28592, embedded labels, delimiter is ';', msq)
where CodePeriode < $(vMin_GERS) and CodePeriode >= '201707'
;

/*
GERS Stathop local dim table
Input into Global master
Input into DOT Master
Join is baased upon CodeProduit (product_code) to Composant (product_code) 
*/

left join (STATHOP)
LOAD
    Composant 			as product_code,
	NomLaboFabricant  	as company,
    NomComposant 		as product_name,
    NomR2 				as brand,
    NomR1 				as sub_class_stathop
FROM $(vGersStathopExcel)
(ooxml, embedded labels, table is Sheet2);

/*
Join PDV table to unlock the HCO name
Join based on CodeGeographie to "PV"
*/

left join (STATHOP)
LOAD
    "PV" as CodeGeographie,
	COD_UGA,
    "Nom PV" as HCO    
FROM $(vGersPDV)
(txt, codepage is 28591, embedded labels, delimiter is ';', msq);


// LOAD DIM TABLE

left join(STATHOP)
LOAD
	*,
    if(branded_biosim='BIOSIMILAR',class & ' BIOSIM',class) as class_type;
LOAD
    upper(brand) as brand,
    FirstValue("class") as class,
	Firstvalue(branded_biosim) as branded_biosim
FROM [lib://Market View/1.QVD/2.Transform/t_dim_product.qvd]
(qvd)
group by upper(brand)
;